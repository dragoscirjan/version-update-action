name: version-update-action
description: Github Action for Updating Versions

inputs:
  workspaces:
    description: Paths to the workspaces (separated by comma)
    default: "."
  version_files:
    description: Version files to look for in each workspace (separated by comma)
    default: package.json
  no_pr:
    description: Use pull request to increase the version
  dry_run:
    description: Do nothing. Will just print commands to run

runs:
  using: "composite"
  steps:
    - name: Commit Info
      id: git_info
      shell: bash
      run: |
        last_commit_message=$(git log -1 --no-merges --pretty=format:%B)
        echo "last_commit_message=${last_commit_message}"
        echo "last_commit_message=${last_commit_message}" >> $GITHUB_OUTPUT

        last_pr_message=$(git log -1 --pretty=format:%B)
        echo "last_pr_message=${last_pr_message}"
        echo "last_pr_message=${last_pr_message}" >> $GITHUB_OUTPUT

        last_tag=$(git for-each-ref --sort=-taggerdate --format '%(refname:short)' refs/tags | head -n 1)
        if [[ -z "$last_tag" ]]; then
          # last_tag=$(echo "HEAD~$(git rev-list --count HEAD)")
          last_tag=$(git rev-list --max-parents=0 HEAD)
        fi
        echo "last_tag=${last_tag}"
        echo "last_tag=${last_tag}" >> $GITHUB_OUTPUT

    - name: Determine Changed Packages
      id: workspaces_info
      shell: bash
      run: |
        workspaces_string="${{ inputs.workspaces }}"
        version_files_string="${{ inputs.version_files }}"
        changed='[]'

        IFS=',' read -r -a workspaces_array <<< "$workspaces_string"
        IFS=',' read -r -a version_files_array <<< "$version_files_string"

        main_workspace=
        main_version_file=

        # if there are more than one workspaces, ignore 1st (1st one is the project)
        if [[ ${#workspaces_array[@]} -gt 1 ]]; then
          main_workspace=${workspaces_array[0]}
          main_version_file=${version_files_array[0]}
          workspaces_array=("${workspaces_array[@]:1}")
          version_files_array=("${version_files_array[@]:1}")
        fi

        for ((i=0; i<${#workspaces_array[@]}; i++)); do
          workspace=${workspaces_array[$i]}
          version_file=${version_files_array[$i]}
          echo "testing workspace '$workspace' for changes"

          changed_files=$(git diff --name-only "${{ steps.git_info.outputs.last_tag }}" HEAD -- "$workspace")
          if [[ -n "$changed_files" ]]; then
            echo '- changes found'
            changed=$(echo "$changed" | jq --arg pt "$workspace" --arg vf "$version_file" '. += [{"path": $pt, "version_file": $vf}]')
          else
            echo '- no changes found'
          fi
        done

        # if one of the workspaces changes, then project version changes as well
        if [[ "$changed" != '[]' && -n "$main_workspace" ]]; then
          changed=$(echo "$changed" | jq --arg pt "$main_workspace" --arg vf "$main_version_file" '. += [{"path": $pt, "version_file": $vf}]')
        fi

        changed_json=$(echo "$changed" | jq -c '.')

        echo "changed=${changed_json}"
        echo "changed=\"${changed_json}\"" >> $GITHUB_OUTPUT

    - name: Version Info
      id: version_info
      shell: bash
      run: |
        last_commit_message="${{ steps.git_info.outputs.last_commit_message }}"

        increment=""
        if [[ "$last_commit_message" == "feat!:"* || "$last_commit_message" == "feature!:"* || "$last_commit_message" == *"BREAKING CHANGE"* ]]; then
          increment="major"
        elif [[ "$last_commit_message" == "feat:"* || "$last_commit_message" == "feature:"* ]]; then
          increment="minor"
        elif [[ "$last_commit_message" == "fix:"* ]]; then
          increment="patch"
        fi
        echo "increment=\"${increment}\""
        echo "increment=\"${increment}\"" >> $GITHUB_OUTPUT

        pre_release_id=""
        if [[ "$last_commit_message" == "(rc"* || "$last_commit_message" == "(release-candidate"* ]]; then
          pre_release_id=$(echo "$last_commit_message" | grep -oP '\((rc|release-candidate)(?::\K[^)]*|)\)' | sed 's/^$/rc/')
        fi
        echo "pre_release_id=\"${pre_release_id}\""
        echo "pre_release_id=\"${pre_release_id}\"" >> $GITHUB_OUTPUT

    - name: Commands Warmup
      id: commands_info
      shell: bash
      run: |
        command=""
        if [[ -n "${{ inputs.dry_run }}" ]]; then
          command="echo"
        fi

        # for release-it, will not use npm push, git tag and git push
        RELEASEIT="npx release-it --no-npm.publish --no-git.tag --no-git.push --ci"
        RELEASEIT="${RELEASEIT} --increment=${{ steps.version_info.outputs.increment }}"
        if [[ -n "${{ steps.version_info.outputs.pre_release_id }}" ]]; then
          RELEASEIT="${RELEASE} --preReleaseId=${{ steps.version_info.outputs.pre_release_id }}"
        fi

        echo "RELEASEIT=${RELEASEIT}"
        echo "RELEASEIT=${RELEASEIT}" >> $GITHUB_ENV

    - name: Increase Versions
      if: ${{ steps.version_info.outputs.increment && steps.workspaces_info.outputs.changed != '[]' }}
      shell: bash
      run: |
        echo '${{ steps.workspaces_info.outputs.changed }}' | jq -c '.' | while read ws; do
          if [[ -z "$ws" ]]; then continue; fi
          echo "$ws"
          ws_path=$(echo "$ws" | jq -r '.path')
          ws_version_file=$(echo "$ws" | jq -r '.version_file')
          echo "::group::Increasing version for workspace $ws_path"

          cd $ws_path
          if [[ ! -f $ws_version_file ]]; then
            echo "::error::Missing ${ws_version_file} version file in workspace ${ws_path}"
            exit 1
          fi

          case $ws_version_file in
            package.json)
              ${{ env.RELEASEIT }}

              echo "$ws_path workspace version increased to $(cat package.json | jq -r '.version')"
              ;;
            version|VERSION|version.txt|VERSION.txt)
              version=$(cat $ws_version_file)
              if [[ -z "$version" ]]; then version="0.0.0"; fi
              ${{ env.RELEASEIT }} --pre-changelog "VERSION=$versioin" --post-changelog "echo $VERSION > $ws_version_file"

              echo "$ws_path workspace version increased to $(cat $ws_version_file)"
              ;;
          esac

          cd ${{ github.workspace }}
          echo '::endgroup::'
        done

    # - name: Increase Versions
    #   id: increase_versions_info
    #   shell: bash
    #   run: |
    #     workspaces_string="${{ inputs.workspaces }}"
    #     version_files_string="${{ inputs.version_files }}"
    #     versions_array=()
    #
    #     IFS=',' read -r -a workspace_array <<< "$workspaces_string"
    #     IFS=',' read -r -a version_file_array <<< "$version_files_string"
    #
    #     for workspace in "${workspace_array[@]}"; do
    #       cd $workspace
    #       for version_file in "${version_file_array[@]}"; do
    #         if [[ -f "$version_file" && "$version_file" == "package.json" ]]; then
    #           echo "increasing version in $version_file"
    #           case $version_file in
    #             package.json)
    #               version=$(cat package.json | jq -r '.version')
    #               ;;
    #             version|VERSION|version.txt|VERSION.txt)
    #               version=$(cat $version_file)
    #               ;;
    #             *)
    #               echo "::error:: Unsupported version file: $version_file"
    #               exit 1
    #           esac
    #           versions_array+=($version)
    #         fi
    #       done
    #       cd ${{ github.workspace }}
    #     done
    #
    #     IFS=',' versions_string="${versions_array[*]}"
    #     echo "versions=$versions_string"
    #     echo "versions=$versions_string" >> $GITHUB_OUTPUT
    #
    # - name: Prepare Tag
    #   if: ${{ steps.increase_versions_info.outputs.versions }}
    #   shell: bash
    #   run: |
    #     workspaces_string="${{ inputs.workspaces }}"
    #     versions_string='${{ steps.increase_versions_info.outputs.versions }}'
    #
    #     IFS=',' read -r -a workspaces_array <<< "$workspaces_string"
    #     IFS=',' read -r -a versions_array <<< "$versions_string"
    #
    #     tag="v${versions_array[0]}"
    #
    #     if [[ ${#versions_array[@]} -gt 1 ]]; then
    #       versions_array=("${versions_array[@]:1}")
    #       workspaces_array=("${workspaces_array[@]:1}")
    #
    #       for (( i=0; i<${#versions_array[@]}; i++ )); do
    #         tag="${tag}--${workspaces_array[$i]}@${versions_array[$i]}"
    #       done
    #     fi
    #
    #     echo "tag=$tag"
    #     echo "tag=$tag" >> $GITHUB_OUTPUT
    #
    # # - name: Create version branch
    # #   if: ${{ steps.increase_version_info.outputs.versions && ! inputs.no_pr }}
    # #   shell: bash
    # #   run: |
    # #     version_branch="version_${{ steps.version_info.outputs.version }}"
    # #     git checkout -b $version_branch
    # #
    # #     git add .
    # #     git commit -am "chore: version merge ${{ steps.version_info.outputs.version }}"
    # #     #git push origin $version_branch
    # #
    # #     #gh
    # #
    # # # TODO: add step for merging version into main, which also needs to create the tag
    # #
    # # - name: Commit version
    # #   if: ${{ steps.increase_version_info.outputs.versions && inputs.no_pr }}
    # #   shell: bash
    # #   run: |
    # #     git add .
    # #     git commit -am "chore: version released ${{ steps.version_info.outputs.versions }}
