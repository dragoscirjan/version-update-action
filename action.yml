name: version-update-action
description: Github Action for Updating Versions

inputs:
  workspaces:
    description: Paths to the workspaces (separated by comma)
    default: "."
  version_files:
    description: Version files to look for in each workspace (separated by comma)
    default: package.json
  no_pr:
    description: Use pull request to increase the version
  dry_run:
    description: Do nothing. Will just print commands to run

runs:
  using: "composite"
  steps:
    - name: Git Info
      id: git_info
      shell: bash
      run: |
        echo "commit_message=$(git log -1 --no-merges --pretty=format:%B)" >> $GITHUB_OUTPUT
        echo "pr_message=$(git log -1 --pretty=format:%B)" >> $GITHUB_OUTPUT

    - name: Version Info
      id: version_info
      shell: bash
      run: |
        commit_message="${{ steps.git_info.outputs.commit_message }}"

        increment=""
        if [[ "$commit_message" == "feat!:"* || "$commit_message" == "feature!:"* || "$commit_message" == *"BREAKING CHANGE"* ]]; then
          increment="major"
        elif [[ "$commit_message" == "feat:"* || "$commit_message" == "feature:"* ]]; then
          increment="minor"
        elif [[ "$commit_message" == "fix:"* ]]; then
          increment="patch"
        fi
        echo "increment=\"${increment}\""
        echo "increment=\"${increment}\"" >> $GITHUB_OUTPUT

        pre_release_id=""
        if [[ "$commit_message" == "(rc"* || "$commit_message" == "(release-candidate"* ]]; then
          pre_release_id=$(echo "$commit_message" | grep -oP '\((rc|release-candidate)(?::\K[^)]*|)\)' | sed 's/^$/rc/')
        fi
        echo "pre_release_id=\"${pre_release_id}\""
        echo "pre_release_id=\"${pre_release_id}\"" >> $GITHUB_OUTPUT

    - name: Commands Warmup
      id: git-info
      shell: bash
      run: |
        command=""
        if [[ -n "${{ inputs.dry_run }}" ]]; then
          command="echo"
        fi

        # for release-it, will not use npm push, git tag and git push 
        RELEASEIT="npx release-it --no-npm --git.tag=false --git.push=false"
        RELEASEIT="${RELEASEIT} --incremnet=${{ steps.version_info.outputs.increment }}"
        if [[ -n "${{ steps.version_info.outputs.pre_release_id }}" ]]; then
          RELEASEIT="${RELEASE} --preReleaseId=${{ steps.version_info.outputs.pre_release_id }}"
        fi

        echo "RELEASEIT=${RELEASEIT}" >> $GITHUB_ENV

    - name: Debug Commands
      shell: bash
      run: |
        echo env=$(echo '${{ toJSON(env) }}' | jq -r '.')

    - name: Increase Versions
      id: versions
      shell: bash
      run: |
        workspaces_string="${{ inputs.workspaces }}"
        version_files_string="${{ inputs.version_files }}"
        versions_array=()

        IFS=',' read -r -a workspace_array <<< "$workspaces_string"
        IFS=',' read -r -a version_file_array <<< "$version_files_string"

        for workspace in "${workspace_array[@]}"; do
          echo "::group::versioning workspace $workspace"
          cd $workspace
          for version_file in "${version_file_array[@]}"; do
            echo "- testing version file $version_file"
            if [[ -f "$version_file" && "$version_file" == "package.json" ]]; then
              echo "increasing version in $version_file"
              ${{ env.RELEASEIT }}

              version=$(cat package.json | jq -r '.version')
              echo "version increased to $version"
              versions_array+=($version)
            fi
          done
          cd ${{ github.workspace }}
          echo "::endgroup::"
        done

        versions_string=$(IFS=',' echo ${versions_array[*]})
        echo "versions=$versions_string"
        echo "versions=$versions_string" >> $GITHUB_OUTPUT

    # - name: Create version branch
    #   if: ${{ ! inputs.no_pr }}
    #   shell: bash
    #   run: |
    #     version_branch="version_${{ steps.version_info.outputs.version }}"
    #     git checkout -b $version_branch
    #
    #     git add .
    #     git commit -am "chore: version merge ${{ steps.version_info.outputs.version }}"
    #     git push origin $version_branch
    #
    #     gh
