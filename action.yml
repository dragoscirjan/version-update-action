name: version-update-action
description: Github Action for Updating Versions

inputs:
  workspaces:
    description: Paths to the workspaces (separated by comma)
    default: "."
  version_files:
    description: Version files to look for in each workspace (separated by comma)
    default: package.json
  no_pr:
    description: Use pull request to increase the version
  dry_run:
    description: Do nothing. Will just print commands to run

runs:
  using: "composite"
  steps:
    - name: Commit Info
      id: git_info
      shell: bash
      run: |
        last_commit_message=$(git log -1 --no-merges --pretty=format:%B)
        echo "last_commit_message=${last_commit_message}"
        echo "last_commit_message=${last_commit_message}" >> $GITHUB_OUTPUT

        last_pr_message=$(git log -1 --pretty=format:%B)
        echo "last_pr_message=${last_pr_message}"
        echo "last_pr_message=${last_pr_message}" >> $GITHUB_OUTPUT

        last_tag=$(git for-each-ref --sort=-taggerdate --format '%(refname:short)' refs/tags | head -n 1 || echo "HEAD~$(git rev-list --count HEAD)")
        echo "last_tag=${last_tag}"
        echo "last_tag=${last_tag}" >> $GITHUB_OUTPUT

    - name: Determine Changed Packages
      id: workspaces_info
      shell: bash
      run: |
        changed='[]'

        IFS=',' read -r -a workspace_array <<< "$workspaces_string"
        IFS=',' read -r -a version_file_array <<< "$version_files_string"

        # if there are more than one workspaces, ignore 1st (1st one is the project)
        if [[ ${#workspaces_array[@]} -gt 1 ]]; then
           workspaces_array=("${workspaces_array[@]:1}")
           version_file_array=("${version_file_array[@]:1}")
        fi

        for ((i=0; i<${#workspaces_array[@]}; i++)); do
          workspace=${workspaces_array[$i]}
          version_file=${version_file_array[$i]}
          echo "testing workspace '$workspace' for changes"
           
          changed_files=$(git diff --name-only "${{ steps.git_info.outputs.last_tag }}" HEAD -- "$workspace")
          if [[ -n "$changed_files" ]]; then
            echo '- changes found'
            changed=$(echo "$changed" | jq --arg ws "$workspace" --arg vf "$version_file" '. += [{"workspace": $ws, "version_file": $vf}]')
          else
            echo '- no changes found'
          fi
        done

        changed=$(echo "$changed" | jq -c '.')

    # - name: Version Info
    #   id: version_info
    #   shell: bash
    #   run: |
    #     last_commit_message="${{ steps.git_info.outputs.last_commit_message }}"
    #
    #     increment=""
    #     if [[ "$last_commit_message" == "feat!:"* || "$last_commit_message" == "feature!:"* || "$last_commit_message" == *"BREAKING CHANGE"* ]]; then
    #       increment="major"
    #     elif [[ "$last_commit_message" == "feat:"* || "$last_commit_message" == "feature:"* ]]; then
    #       increment="minor"
    #     elif [[ "$last_commit_message" == "fix:"* ]]; then
    #       increment="patch"
    #     fi
    #     echo "increment=\"${increment}\""
    #     echo "increment=\"${increment}\"" >> $GITHUB_OUTPUT
    #
    #     pre_release_id=""
    #     if [[ "$last_commit_message" == "(rc"* || "$last_commit_message" == "(release-candidate"* ]]; then
    #       pre_release_id=$(echo "$last_commit_message" | grep -oP '\((rc|release-candidate)(?::\K[^)]*|)\)' | sed 's/^$/rc/')
    #     fi
    #     echo "pre_release_id=\"${pre_release_id}\""
    #     echo "pre_release_id=\"${pre_release_id}\"" >> $GITHUB_OUTPUT
    #
    # - name: Commands Warmup
    #   id: commands_info
    #   shell: bash
    #   run: |
    #     command=""
    #     if [[ -n "${{ inputs.dry_run }}" ]]; then
    #       command="echo"
    #     fi
    #
    #     # for release-it, will not use npm push, git tag and git push
    #     RELEASEIT="npx release-it --no-npm.publish --no-git.tag --no-git.push --ci"
    #     RELEASEIT="${RELEASEIT} --increment=${{ steps.version_info.outputs.increment }}"
    #     if [[ -n "${{ steps.version_info.outputs.pre_release_id }}" ]]; then
    #       RELEASEIT="${RELEASE} --preReleaseId=${{ steps.version_info.outputs.pre_release_id }}"
    #     fi
    #
    #     echo "RELEASEIT=${RELEASEIT}" >> $GITHUB_ENV
    #
    # - name: Debug Commands
    #   shell: bash
    #   run: |
    #     echo env=$(echo '${{ toJSON(env) }}' | jq -r '.')
    #
    # - name: Increase Versions
    #   if: ${{ steps.version_info.outputs.increment }}
    #   shell: bash
    #   run: |
    #     workspaces_string="${{ inputs.workspaces }}"
    #     version_files_string="${{ inputs.version_files }}"
    #
    #     IFS=',' read -r -a workspace_array <<< "$workspaces_string"
    #     IFS=',' read -r -a version_file_array <<< "$version_files_string"
    #
    #     for workspace in "${workspace_array[@]}"; do
    #       echo "::group::versioning workspace $workspace"
    #       cd $workspace
    #       for version_file in "${version_file_array[@]}"; do
    #         echo "- testing version file $version_file"
    #         if [[ -f "$version_file" && "$version_file" == "package.json" ]]; then
    #           echo "increasing version in $version_file"
    #           case $version_file in
    #             package.json)
    #               ${{ env.RELEASEIT }}
    #               ;;
    #             version|VERSION|version.txt|VERSION.txt)
    #               version=$(cat $version_file)
    #               version=${version:-0.0.0}
    #               ${{ env.RELEASEIT }} --pre-changelog "VERSION=$version" --post-changelog "echo $VERSION > $version_file"
    #               ;;
    #             *)
    #               echo "::error:: Unsupported version file: $version_file"
    #               exit 1
    #           esac
    #           echo "version increased to $version"
    #         fi
    #       done
    #       cd ${{ github.workspace }}
    #       echo "::endgroup::"
    #     done
    #
    # - name: Increase Versions
    #   id: increase_versions_info
    #   shell: bash
    #   run: |
    #     workspaces_string="${{ inputs.workspaces }}"
    #     version_files_string="${{ inputs.version_files }}"
    #     versions_array=()
    #
    #     IFS=',' read -r -a workspace_array <<< "$workspaces_string"
    #     IFS=',' read -r -a version_file_array <<< "$version_files_string"
    #
    #     for workspace in "${workspace_array[@]}"; do
    #       cd $workspace
    #       for version_file in "${version_file_array[@]}"; do
    #         if [[ -f "$version_file" && "$version_file" == "package.json" ]]; then
    #           echo "increasing version in $version_file"
    #           case $version_file in
    #             package.json)
    #               version=$(cat package.json | jq -r '.version')
    #               ;;
    #             version|VERSION|version.txt|VERSION.txt)
    #               version=$(cat $version_file)
    #               ;;
    #             *)
    #               echo "::error:: Unsupported version file: $version_file"
    #               exit 1
    #           esac
    #           versions_array+=($version)
    #         fi
    #       done
    #       cd ${{ github.workspace }}
    #     done
    #
    #     IFS=',' versions_string="${versions_array[*]}"
    #     echo "versions=$versions_string"
    #     echo "versions=$versions_string" >> $GITHUB_OUTPUT
    #
    # - name: Prepare Tag
    #   if: ${{ steps.increase_versions_info.outputs.versions }}
    #   shell: bash
    #   run: |
    #     workspaces_string="${{ inputs.workspaces }}"
    #     versions_string='${{ steps.increase_versions_info.outputs.versions }}'
    #
    #     IFS=',' read -r -a workspaces_array <<< "$workspaces_string"
    #     IFS=',' read -r -a versions_array <<< "$versions_string"
    #
    #     tag="v${versions_array[0]}"
    #
    #     if [[ ${#versions_array[@]} -gt 1 ]]; then
    #       versions_array=("${versions_array[@]:1}")
    #       workspaces_array=("${workspaces_array[@]:1}")
    #
    #       for (( i=0; i<${#versions_array[@]}; i++ )); do
    #         tag="${tag}--${workspaces_array[$i]}@${versions_array[$i]}"
    #       done
    #     fi
    #
    #     echo "tag=$tag"
    #     echo "tag=$tag" >> $GITHUB_OUTPUT
    #
    # # - name: Create version branch
    # #   if: ${{ steps.increase_version_info.outputs.versions && ! inputs.no_pr }}
    # #   shell: bash
    # #   run: |
    # #     version_branch="version_${{ steps.version_info.outputs.version }}"
    # #     git checkout -b $version_branch
    # #
    # #     git add .
    # #     git commit -am "chore: version merge ${{ steps.version_info.outputs.version }}"
    # #     #git push origin $version_branch
    # #
    # #     #gh
    # #
    # # # TODO: add step for merging version into main, which also needs to create the tag
    # #
    # # - name: Commit version
    # #   if: ${{ steps.increase_version_info.outputs.versions && inputs.no_pr }}
    # #   shell: bash
    # #   run: |
    # #     git add .
    # #     git commit -am "chore: version released ${{ steps.version_info.outputs.versions }}
