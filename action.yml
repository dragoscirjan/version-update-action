name: version-update-action
description: Github Action for Updating Versions

inputs:
  github_token:
    description: Github Token for git commit or gh pr create
    required: true
  workspaces:
    default: "."
    description: Paths to the workspaces (separated by comma)
  version_files:
    default: package.json
    description: Version files to look for in each workspace (separated by comma)
  version_message:
    default: version pull request
    description: Version pull request message
  no_pr:
    description: Use pull request to increase the version
  dry_run:
    description: Do nothing. Will just print commands to run

outputs:
  version_branch:
    description: Name of the version branch
    value: "${{ steps.version_branch.outputs.version_branch }}"
  pr_title:
    description: Title of the version pull request
    value: "${{ steps.version_branch.outputs.pr_title }}"
  tag:
    description: Tag to have been pushed
    value: "${{ steps.tag_info.outputs.tag }}"
  # status:
  #   description: Status of the version increase
  #   value: "${{ steps. }}"

runs:
  using: "composite"
  steps:
    - name: Commit Info
      id: git_info
      if: ${{ github.event_name == 'push' }}
      shell: bash
      run: |
        last_commit_message=$(git log -1 --no-merges --pretty=format:%B)
        echo "last_commit_message=${last_commit_message}"
        echo "last_commit_message<<EOF" >> $GITHUB_OUTPUT
        echo "${last_commit_message}" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

        last_pr_message=$(git log -1 --pretty=format:%B)
        echo "last_pr_message=${last_pr_message}"
        echo "last_pr_message<<EOF" >> $GITHUB_OUTPUT
        echo "${last_pr_message}" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

        last_tag=$(git for-each-ref --sort=-taggerdate --format '%(refname:short)' refs/tags | head -n 1)
        if [[ -z "$last_tag" ]]; then
          # last_tag=$(echo "HEAD~$(git rev-list --count HEAD)")
          last_tag=$(git rev-list --max-parents=0 HEAD)
        fi
        echo "last_tag=${last_tag}"
        echo "last_tag=${last_tag}" >> $GITHUB_OUTPUT

    - name: Determine Changed Packages
      id: workspaces_info
      if: ${{ github.event_name == 'push' }}
      shell: bash
      run: |
        workspaces_string="${{ inputs.workspaces }}"
        version_files_string="${{ inputs.version_files }}"
        changed='[]'

        IFS=',' read -r -a workspaces_array <<< "$workspaces_string"
        IFS=',' read -r -a version_files_array <<< "$version_files_string"

        main_workspace=
        main_version_file=

        # if there are more than one workspaces, ignore 1st (1st one is the project)
        if [[ ${#workspaces_array[@]} -gt 1 ]]; then
          main_workspace=${workspaces_array[0]}
          main_version_file=${version_files_array[0]}
          workspaces_array=("${workspaces_array[@]:1}")
          version_files_array=("${version_files_array[@]:1}")
        fi

        for ((i=0; i<${#workspaces_array[@]}; i++)); do
          workspace=${workspaces_array[$i]}
          version_file=${version_files_array[$i]}
          echo "testing workspace '$workspace' for changes"

          changed_files=$(git diff --name-only "${{ steps.git_info.outputs.last_tag }}" HEAD -- "$workspace")
          if [[ -n "$changed_files" ]]; then
            echo '- changes found'
            changed=$(echo "$changed" | jq --arg pt "$workspace" --arg vf "$version_file" '. += [{"path": $pt, "version_file": $vf}]')
          else
            echo '- no changes found'
          fi
        done

        # if one of the workspaces changes, then project version changes as well
        if [[ "$changed" != '[]' && -n "$main_workspace" ]]; then
          changed=$(echo "$changed" | jq --arg pt "$main_workspace" --arg vf "$main_version_file" '. += [{"path": $pt, "version_file": $vf}]')
        fi

        changed_json=$(echo "$changed" | jq -c '.')

        echo "changed=${changed_json}"
        echo "changed=${changed_json}" >> $GITHUB_OUTPUT

    - name: Version Info
      id: version_info
      if: ${{ github.event_name == 'push' }}
      shell: bash
      run: |
        last_commit_message="${{ steps.git_info.outputs.last_commit_message }}"

        increment=""
        if [[ "$last_commit_message" == "feat!:"* || "$last_commit_message" == "feature!:"* || "$last_commit_message" == *"BREAKING CHANGE"* ]]; then
          increment="major"
        elif [[ "$last_commit_message" == "feat:"* || "$last_commit_message" == "feature:"* ]]; then
          increment="minor"
        elif [[ "$last_commit_message" == "fix:"* ]]; then
          increment="patch"
        fi
        echo "increment=${increment}"
        echo "increment=${increment}" >> $GITHUB_OUTPUT

        pre_release_id=""
        if [[ "$last_commit_message" == "(rc"* || "$last_commit_message" == "(release-candidate"* ]]; then
          pre_release_id=$(echo "$last_commit_message" | grep -oP '\((rc|release-candidate)(?::\K[^)]*|)\)' | sed 's/^$/rc/')
        fi
        echo "pre_release_id=${pre_release_id}"
        echo "pre_release_id=${pre_release_id}" >> $GITHUB_OUTPUT

    - name: Commands Warmup
      id: commands_info
      if: ${{ github.event_name == 'push' }}
      shell: bash
      run: |
        command=""
        if [[ -n "${{ inputs.dry_run }}" ]]; then
          command="echo"
        fi

        # for release-it, will not use npm push, git tag and git push
        RELEASEIT="npx release-it --no-npm.publish --no-git.tag --no-git.push --no-git.commit --no-git.requireCleanWorkingDir --ci"
        RELEASEIT="${RELEASEIT} --increment=${{ steps.version_info.outputs.increment }}"
        if [[ -n "${{ steps.version_info.outputs.pre_release_id }}" ]]; then
          RELEASEIT="${RELEASE} --preReleaseId=${{ steps.version_info.outputs.pre_release_id }}"
        fi

        echo "RELEASEIT=${RELEASEIT}"
        echo "RELEASEIT=${RELEASEIT}" >> $GITHUB_ENV

    - name: Increase Versions
      if: ${{ github.event_name == 'push' && steps.version_info.outputs.increment && steps.workspaces_info.outputs.changed != '[]' }}
      shell: bash
      run: |
        echo '${{ steps.workspaces_info.outputs.changed }}' | jq -c '.[]' | while read ws; do
          if [[ -z "$ws" ]]; then continue; fi
          ws_path=$(echo "$ws" | jq -r '.path')
          ws_version_file=$(echo "$ws" | jq -r '.version_file')
          echo "::group::Increasing version for workspace $ws_path"

          cd $ws_path
          if [[ ! -f $ws_version_file ]]; then
            echo "::error::Missing ${ws_version_file} version file in workspace ${ws_path}"
            exit 1
          fi

          case $ws_version_file in
            package.json)
              ${{ env.RELEASEIT }}

              echo "$ws_path workspace version increased to $(cat package.json | jq -r '.version')"
              ;;
            version|VERSION|version.txt|VERSION.txt)
              version=$(cat $ws_version_file)
              if [[ -z "$version" ]]; then version="0.0.0"; fi
              ${{ env.RELEASEIT }} --pre-changelog "VERSION=$versioin" --post-changelog "echo $VERSION > $ws_version_file"

              echo "$ws_path workspace version increased to $(cat $ws_version_file)"
              ;;
          esac

          cd ${{ github.workspace }}
          echo '::endgroup::'
        done

    # TODO: add a step to build changelogs per workspace

    - name: Build Versions List
      if: ${{ github.event_name == 'push' }}
      id: versions_info
      shell: bash
      run: |
        workspaces_string="${{ inputs.workspaces }}"
        version_files_string="${{ inputs.version_files }}"
        versions_array=()

        IFS=',' read -r -a workspaces_array <<< "$workspaces_string"
        IFS=',' read -r -a version_files_array <<< "$version_files_string"

        for ((i=0; i<${#workspaces_array[@]}; i++)); do
          workspace=${workspaces_array[$i]}
          version_file=${version_files_array[$i]}
          cd $workspace

          case $version_file in
            package.json)
              version=$(cat package.json | jq -r '.version')
              ;;
            version|VERSION|version.txt|VERSION.txt)
              version=$(cat $version_file)
              ;;
            *)
              echo "::error:: Unsupported version file: $version_file"
              exit 1
          esac
            versions_array+=($version)

          cd ${{ github.workspace }}
        done

        IFS=',' versions_string="${versions_array[*]}"
        echo "versions=$versions_string"
        echo "versions=$versions_string" >> $GITHUB_OUTPUT

    - name: Prepare Tag
      id: tag_info
      if: ${{ github.event_name == 'push' && steps.versions_info.outputs.versions }}
      shell: bash
      run: |
        workspaces_string="${{ inputs.workspaces }}"
        version_files_string="${{ inputs.version_files }}"
        versions_string='${{ steps.versions_info.outputs.versions }}'

        IFS=',' read -r -a workspaces_array <<< "$workspaces_string"
        IFS=',' read -r -a version_files_array <<< "$version_files_string"
        IFS=',' read -r -a versions_array <<< "$versions_string"

        tag="v${versions_array[0]}"

        if [[ ${#versions_array[@]} -gt 1 ]]; then
          workspaces_array=("${workspaces_array[@]:1}")
          version_files_array=("${version_files_array[@]:1}")
          versions_array=("${versions_array[@]:1}")

          for (( i=0; i<${#versions_array[@]}; i++ )); do
            workspace=${workspaces_array[$i]}
            version_file=${version_files_array[$i]}
            cd $workspace
            workspace_name=$workspace

            case $version_file in
              package.json)
                workspace_name=$(cat package.json | jq -r '.name')
                ;;
            esac
            tag="${tag}_${workspace_name}${versions_array[$i]}"

            cd ${{ github.workspace }}
          done
        fi

        echo "tag=$tag"
        echo "tag=$tag" >> $GITHUB_OUTPUT

    - name: Set up Git
      if: ${{ github.event_name == 'push' }}
      shell: bash
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git config --global --add safe.directory "$GITHUB_WORKSPACE"
        git remote set-url origin https://x-access-token:${{ inputs.github_token }}@github.com/${{ github.repository }}.git

        pwd
        ls -la .
        git remote show origin

    - name: Create Version Branch
      env:
        GH_TOKEN: ${{ inputs.github_token }}
      id: version_branch
      if: ${{ github.event_name == 'push' && steps.version_info.outputs.increment && steps.versions_info.outputs.versions && ! inputs.no_pr }}
      shell: bash
      run: |
        tag="${{ steps.tag_info.outputs.tag }}"
        tag=$(echo $tag | sed -e 's/[^a-zA-Z0-9]/_/g')
        version_branch="version_${tag}"
        echo "version_branch=${version_branch}" >> $GITHUB_OUTPUT

        # Check if there are changes before creating a branch and committing
        if [[ -n "$(git status --porcelain)" ]]; then
          git checkout -b $version_branch
          git add .
          git commit -am "chore: ${{ inputs.version_message }} ${{ steps.tag_info.outputs.tag }}"
          git push origin $version_branch

          pr_title="${{ inputs.version_message }} ${{ steps.tag_info.outputs.tag }}" 
          echo "pr_title=${pr_title}" >> $GITHUB_OUTPUT
          gh pr create --base main --head "$version_branch" --title "$pr_title" --body "New Version Proposed"

          echo "version_pr=1" >> $GITHUB_OUTPUT
        else
          echo "::warning::No changes to commit. Skipping branch creation."
        fi

    - name: Commit Version
      id: version_commit
      if: ${{ steps.versions_info.outputs.versions && inputs.no_pr }}
      shell: bash
      run: |
        git add .
        git commit -am "chore: ${{ inputs.version_message }} ${{ steps.version_info.outputs.versions }}

        echo "version_commit=1" >> $GITHUB_OUTPUT

    - name: Create Tag
      id: tag_create_info
      if: ${{ github.event_name == 'push' && ( steps.version_commit.outputs.version_commit || contains(steps.git_info.outputs.last_commit_message, inputs.version_message) ) }}
      shell: bash
      run: |
        echo "${{ steps.git_info.outputs.last_commit_message }}"

        tag="${{ steps.tag_info.outputs.tag }}"
        git fetch --all --tags

        # Ensure the tag doesn't already exist
        if git rev-parse "$tag" >/dev/null 2>&1; then
          echo "::error::Tag $tag already exists. Skipping tag creation."
          exit 1
        else
          git tag "$tag"
          git push origin "$tag"
        fi
